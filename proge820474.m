function [flag, T, W] = proge820474(Tf,x0,xp0)
%   [flag, T, W] = proge820474(Tf,x0,xp0)
%   Author: Amanda Lauen
%   Date: December 3rd 2021
%   Calculate the solution to the harmonic oscillator differential equation 
%   problem with the given initial values c, m, and k along with the given
%   input values Tf, xp0, and x0 to get the matricies T and W representing
%   differential equations calculated by ode23.
%
%   Input
%       Tf =  the length of time to run the model in using the unit of
%       measure of seconds along with the initial starting time set as t=0
%       x0 = the initial starting position of the mass using the
%       unit of measure of meters
%       xp0 = the initial velocity of the
%       mass using the units of meters per second.
%
%   Outputs
%       flag = flag to signify program executed properly or not
%              flag = 0 --> program runs successfully
%              flag = 1 --> The input values are not feasible
%
%       T = An array that is generated by ode23
%
%       W = Two column array with one column representing the values of
%       position for every time step and the other column representing the
%       velocity of the mass at every time step
%
%   Sample 
%       [flag, T, W] = proge820474(80,1,0.8)
%       [flag, T, W] = proge820474(100,5,0.6)
flag = 0;

% call ode23 to solve the IVP
me = [];
try
    [T, W] = ode23(@myfunsysdiff,[0 Tf], [x0; xp0]);
catch me
end

% Check of the values are feasible
if (Tf <=0) || ~isempty(me) || (T(end) ~= Tf) || any(~isfinite(W(:)))
    flag = 1;
    T = -9;
    W = -9;
    return
end

% plot the results
figure
plot(T,W, 'linewidth',1.5)
title('Time Respovse')
xlabel('Time [ s ]')
ylabel('X and X''')
legend('Displacement', 'Velocity')

%The following code is modified code from modified_euler_sys.m by Dr. Kyle
%Riley [KR21].

% function for evaluation of F(t,W) for the IVP in 1st order system form
function dW =  myfunsysdiff(t,W)
% W' = F(t,W) with W = [x; y] = [x; x']
% x' = y
% y' = -c/m*y -k/m*x

% Fixed values
m = 20;% Mass in kg
k = 20;% Spring constant in N/m
% C-value
if t < 0 % t = time
    c = 4; % Friction coefficient
elseif (0 <= t) && (t <= 10)
    c = 4 - 0.02*t^2;
elseif t > 10
    c = 2;
end

% c = 3;% for comparison purpose, see cmprWithAnal

% initialize the derivative vector
dW = 0*W;

dW(1) = W(2);                % x' = y
dW(2) = -c/m*W(2) - k/m*W(1);% y' = -c/m*y - k/m*x
end % end function 

end


